{"version":3,"sources":["components/WikiLink.js","components/PopUpInfo.js","containers/BaseMap/BaseMap.js","App.js","reportWebVitals.js","index.js"],"names":["WikiLink","props","style","marginTop","className","href","where","target","PopUpInfo","place","placeUrl","regionUrl","region","showPlace","description","charAt","toUpperCase","slice","showRegion","showModal","styles","infoCard","onClick","setShowModal","closeButton","innerInfo","country","latlon","coordinates","lat","lon","border","display","position","backgroundColor","borderRadius","margin","marginLeft","opacity","BaseMap","mapboxgl","accessToken","useState","setLatLon","setCountry","setRegion","setShowRegion","setPlace","setShowPlace","setDescription","useEffect","map","Map","container","center","zoom","el","document","createElement","marker","Marker","getElement","addEventListener","geocoder","MapboxGeocoder","language","on","result","geometry","setLngLat","addTo","properties","accuracy","place_type","text","wikiId","wikidata","undefined","axios","get","then","response","data","entities","descriptions","en","value","catch","error","console","log","context","i","length","id","includes","place_name","addControl","mapContainer","top","bottom","width","boxShadow","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4QAaeA,G,YAXE,SAACC,GAId,OACI,qBAAKC,MAAO,CAACC,UAAU,MAAvB,SACI,mBAAGC,UAAU,WAAUC,KAJjB,iCAIiCJ,EAAMK,MAAOC,OAAO,SAA3D,SAAqEN,EAAMK,YCiCxEE,EAtCG,SAACP,GAEf,IAAIQ,EAAQ,KACRC,EAAW,KACXC,EAAY,KAEZC,EAAS,KAYjB,OAVOX,EAAMY,YACLJ,EAAS,8BAAG,iCAASR,EAAMQ,QAAlB,KAAoCR,EAAMa,YAAYC,OAAO,GAAGC,cAAgBf,EAAMa,YAAYG,MAAM,MACjHP,EAAW,cAAC,EAAD,CAAUJ,MAAOL,EAAMQ,SAEnCR,EAAMiB,aACLN,EAAS,4BAAG,iCAASX,EAAMW,WAC3BD,EAAY,cAAC,EAAD,CAAUL,MAAOL,EAAMW,SAC9B,wBAGVX,EAAMkB,UAEL,sBAAKjB,MAAOkB,EAAOC,SAAnB,UACE,wBAAQC,QAASrB,EAAMsB,aAAarB,MAAOkB,EAAOI,YAAlD,eACE,sBAAKtB,MAAOkB,EAAOK,UAAnB,UACI,4BAAG,iCAASxB,EAAMyB,YACjBd,EACAH,EACD,8BAAG,mCAASR,EAAM0B,OAAOC,YAAYC,IAAlC,KAAyC5B,EAAM0B,OAAOC,YAAYE,OAArE,OACA,cAAC,EAAD,CAAUxB,MAAOL,EAAMyB,UACtBf,EACAD,QAKF,MAMPU,EAAS,CACTC,SAAS,CACLU,OAAQ,iBACRC,QAAS,eACTC,SAAU,WACVC,gBAAiB,QACjBC,aAAc,KACdC,OAAQ,MAEZX,UAAU,CACNW,OAAQ,MAEZZ,YAAY,CACRa,WAAW,MACXH,gBAAiB,YACjBI,QAAS,GACTnC,UAAU,KACVgC,aAAc,MACdF,SAAU,a,iBCyDHM,G,MA9GC,WACdC,IAASC,YACP,gGAFkB,MAIOC,mBAAS,CAACd,YAAY,CAACC,IAAI,EAAEC,IAAI,KAJxC,mBAIbH,EAJa,KAINgB,EAJM,OAKUD,mBAAS,IALnB,mBAKbhB,EALa,KAKJkB,EALI,OAMQF,mBAAS,IANjB,mBAMb9B,EANa,KAMLiC,EANK,OAOgBH,oBAAS,GAPzB,mBAObxB,EAPa,KAOD4B,EAPC,OAQMJ,mBAAS,IARf,mBAQbjC,EARa,KAQNsC,EARM,OAScL,oBAAS,GATvB,mBASb7B,EATa,KASFmC,EATE,OAUkBN,mBAAS,IAV3B,mBAUb5B,EAVa,KAUAmC,EAVA,OAWcP,oBAAS,GAXvB,mBAWbvB,EAXa,KAWFI,EAXE,KAmGpB,OA/EA2B,qBAAU,WACR,IAAMC,EAAM,IAAIX,IAASY,IAAI,CAC3BC,UAAW,eACXnD,MAAO,qCACPoD,OAAQ,CAAC,GAAI,IACbC,KAAM,IAGFC,EAAKC,SAASC,cAAc,OAClCF,EAAGpD,UAAY,SACf,IAAMuD,EAAS,IAAInB,IAASoB,OAAOJ,GAEnCG,EAAOE,aAAaC,iBAAiB,SAAS,WAC5CvC,GAAa,MAGf,IAAMwC,EAAY,IAAIC,IAAe,CACjCvB,YAAaD,IAASC,YACtBkB,QAAQ,EACRM,SAAU,QACVzB,SAAUA,MACT0B,GAAG,UAAW,SAAAC,GACfxB,EAAU,2BAAIhB,GAAL,IAAaC,YAAa,CACjCC,IAAKsC,EAAOA,OAAOC,SAASxC,YAAY,GACxCE,IAAKqC,EAAOA,OAAOC,SAASxC,YAAY,OAG1C+B,EAAOU,UAAU,CAACF,EAAOA,OAAOC,SAASxC,YAAY,GAAIuC,EAAOA,OAAOC,SAASxC,YAAY,KAAK0C,MAAMnB,GAG9D,WAAtCgB,EAAOA,OAAOI,WAAWC,UAAyD,UAAhCL,EAAOA,OAAOM,WAAW,IAC5E1B,EAASoB,EAAOA,OAAOO,MACvB1B,GAAa,GACbF,GAAc,IAGdE,GAAa,GAGf,IACI2B,EAASR,EAAOA,OAAOI,WAAWK,cACxBC,IAAXF,EACHG,IAAMC,IAHU,oDAGIJ,EAAS,SACtBK,MAAK,SAAAC,GACJhC,EAAegC,EAASC,KAAKC,SAASR,GAAQS,aAAaC,GAAGC,UAE/DC,OAAM,SAAAC,GAAUC,QAAQC,IAAI,UAGjCzC,EAAe,+BAAD,OAAgCkB,EAAOA,OAAOO,OAE9D,IAAIiB,EAAUxB,EAAOA,OAAOwB,QACxBC,EAAI,EACV,GAAmC,YAAhCzB,EAAOA,OAAOM,WAAW,GACxB,KAAOmB,EAAID,EAAQE,OAAQD,IACpBD,EAAQC,GAAGE,GAAGC,SAAS,UACxB/C,GAAa,GACbD,EAAS4C,EAAQC,GAAGlB,OAEdiB,EAAQC,GAAGE,GAAGC,SAAS,WAC7BjD,GAAc,GACdD,EAAU8C,EAAQC,GAAGlB,OAEfiB,EAAQC,GAAGE,GAAGC,SAAS,YAC7BnD,EAAW+C,EAAQC,GAAGlB,WAK9B5B,GAAc,GACdF,EAAWuB,EAAOA,OAAO6B,eAM/B7C,EAAI8C,WAAWlC,KACb,IAEM,gCACE,qBAAK+B,GAAG,eAAe5F,MAAOkB,EAAO8E,eAC/B,cAAC,EAAD,CAAavE,OAAQA,EAAQlB,MAAOA,EAAOiB,QAASA,EACvCd,OAAQA,EAAQC,UAAWA,EAC3BC,YAAaA,EAAaK,UAAWA,EACrCD,WAAYA,EACZK,aA1FJ,WACvBA,GAAcJ,WAgGdC,EAAS,CACX8E,aAAa,CACXjE,SAAU,WACVkE,IAAK,EACLC,OAAQ,EACRC,MAAO,OACPjE,OAAQ,OACRkE,UAAW,yBCtHAC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCQSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdjE,IAASC,YAAc,gGAEvBuE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzD,SAAS0D,eAAe,SAM1BX,M","file":"static/js/main.9c58794d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst WikiLink = (props) => {\r\n\r\n    let wikiUrl = 'https://en.wikipedia.org/wiki/'\r\n\r\n    return(\r\n        <div style={{marginTop:'2%'}}>\r\n            <a className='wikiLink'href={wikiUrl + props.where} target=\"_blank\">{props.where}</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WikiLink;","import React from 'react';\r\nimport '../assets/globalCss/Link.css'\r\nimport WikiLink from './WikiLink'\r\nconst PopUpInfo = (props) => {\r\n    \r\n    let place = null\r\n    let placeUrl = null\r\n    let regionUrl = null\r\n    let br = null\r\n    let region = null\r\n\r\n    if(props.showPlace){\r\n        place = (<p><strong>{props.place}</strong>: {props.description.charAt(0).toUpperCase() + props.description.slice(1)}</p>)\r\n        placeUrl = <WikiLink where={props.place}></WikiLink>\r\n    }\r\n    if(props.showRegion){\r\n        region = <p><strong>{props.region}</strong></p>\r\n        regionUrl = <WikiLink where={props.region}></WikiLink>\r\n        br = <br></br>\r\n    }\r\n    \r\nif(props.showModal){\r\n    return(\r\n    <div style={styles.infoCard}>\r\n      <button onClick={props.setShowModal}style={styles.closeButton}>X</button>\r\n        <div style={styles.innerInfo}>\r\n            <p><strong>{props.country}</strong></p>\r\n            {region}\r\n            {place}\r\n            <p><strong>{props.latlon.coordinates.lat}, {props.latlon.coordinates.lon}</strong> </p>\r\n            <WikiLink where={props.country}></WikiLink> \r\n            {regionUrl} \r\n            {placeUrl}\r\n        </div>\r\n    </div>)\r\n}\r\nelse{\r\n    return null\r\n}\r\n}\r\n\r\nexport default PopUpInfo\r\n\r\nlet styles = {\r\n    infoCard:{\r\n        border: '2px solid grey',\r\n        display: 'inline-block',\r\n        position: 'absolute',\r\n        backgroundColor: 'white',\r\n        borderRadius: '5%',\r\n        margin: '2%'\r\n    },\r\n    innerInfo:{\r\n        margin: '5%'\r\n    },\r\n    closeButton:{\r\n        marginLeft:'85%',\r\n        backgroundColor: 'cadetblue',\r\n        opacity: 0.8,\r\n        marginTop:'5%',\r\n        borderRadius: '30%',\r\n        position: 'absolute'\r\n    }\r\n\r\n\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\r\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\r\nimport AddressInfo from '../../components/PopUpInfo'\r\nimport axios from 'axios';\r\nimport './Marker.css'\r\n\r\nconst BaseMap = () => {\r\n  mapboxgl.accessToken =\r\n    \"pk.eyJ1IjoiYW50b240NjMwNCIsImEiOiJja2lycGd1eHUwcHFnMnRueWJqNXNqZzF6In0.g3qWW0q0z0VtLgr7f8Mxww\";\r\n\r\n  const [latlon,setLatLon] = useState({coordinates:{lat:0,lon:0}});\r\n  const [country, setCountry] = useState(\"\");\r\n  const [region, setRegion] = useState(\"\");\r\n  const [showRegion, setShowRegion] = useState(false);\r\n  const [place, setPlace] = useState(\"\");\r\n  const [showPlace, setShowPlace] = useState(false);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n\r\n\r\n  const showModalHandler = () => {\r\n    setShowModal(!showModal)\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    const map = new mapboxgl.Map({\r\n      container: \"mapContainer\",\r\n      style: \"mapbox://styles/mapbox/streets-v11\",\r\n      center: [10, 20],\r\n      zoom: 2,\r\n    })\r\n   \r\n    const el = document.createElement('div');\r\n    el.className = 'marker';\r\n    const marker = new mapboxgl.Marker(el);\r\n   \r\n    marker.getElement().addEventListener('click', ()=> {\r\n      setShowModal(true);\r\n    })\r\n\r\n    const geocoder =  new MapboxGeocoder({\r\n        accessToken: mapboxgl.accessToken,\r\n        marker: false,\r\n        language: 'en-EN',\r\n        mapboxgl: mapboxgl\r\n      }).on('result', (result => {\r\n        setLatLon({...latlon, coordinates: {\r\n          lat: result.result.geometry.coordinates[0], \r\n          lon: result.result.geometry.coordinates[1]}});\r\n        \r\n        //Setting a custom marker on the search results coordinates!\r\n        marker.setLngLat([result.result.geometry.coordinates[0], result.result.geometry.coordinates[1]]).addTo(map)\r\n\r\n        //To be able to render different things on different results I have to check what to show..\r\n        if(result.result.properties.accuracy === 'street' || result.result.place_type[0] === 'place'){\r\n          setPlace(result.result.text)\r\n          setShowPlace(true)\r\n          setShowRegion(true)\r\n        }\r\n        else{\r\n          setShowPlace(false)\r\n        }\r\n        \r\n        const wikiUrl = \"https://www.wikidata.org/wiki/Special:EntityData/\"\r\n        let wikiId = result.result.properties.wikidata;\r\n        if(wikiId !== undefined){\r\n        axios.get(wikiUrl + wikiId + '.json')\r\n              .then(response => {\r\n                setDescription(response.data.entities[wikiId].descriptions.en.value)\r\n              })\r\n              .catch(error => {console.log(\"FEL\")})\r\n            }\r\n        else{\r\n          setDescription(`There is no description for ${result.result.text}`)\r\n        }\r\n        let context = result.result.context;\r\n        let i = 0;\r\n      if(result.result.place_type[0] !== 'country'){\r\n          for(i; i < context.length; i++){\r\n              if(context[i].id.includes('place')){\r\n                setShowPlace(true)\r\n                setPlace(context[i].text)\r\n              }\r\n              else if(context[i].id.includes('region')){\r\n                setShowRegion(true);\r\n                setRegion(context[i].text)\r\n              }\r\n              else if(context[i].id.includes('country')){\r\n                setCountry(context[i].text)\r\n              }\r\n        }\r\n      }\r\n      else{\r\n        setShowRegion(false)\r\n        setCountry(result.result.place_name)\r\n      }\r\n      })\r\n    );\r\n  \r\n\r\n  map.addControl(geocoder);\r\n  },[]);\r\n\r\n  return (<div>\r\n            <div id=\"mapContainer\" style={styles.mapContainer}>\r\n            </div><AddressInfo latlon={latlon} place={place} country={country} \r\n                               region={region} showPlace={showPlace} \r\n                               description={description} showModal={showModal}\r\n                               showRegion={showRegion}\r\n                               setShowModal={showModalHandler}\r\n                               />\r\n          </div>)\r\n};\r\n\r\nexport default BaseMap;\r\n\r\nlet styles = {\r\n  mapContainer:{\r\n    position: 'absolute',\r\n    top: 0,\r\n    bottom: 0,\r\n    width: '100%',\r\n    margin: 'auto',\r\n    boxShadow: \"5px 3px 10px #9E9E9E\"\r\n  }\r\n}\r\n","import BaseMap from './containers/BaseMap/BaseMap'\nfunction App() {\n  return (\n    <div >\n      <BaseMap></BaseMap>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport mapboxgl from 'mapbox-gl';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiYW50b240NjMwNCIsImEiOiJja2lycGd1eHUwcHFnMnRueWJqNXNqZzF6In0.g3qWW0q0z0VtLgr7f8Mxww'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}